package at.asitplus.signum.supreme.sign

import at.asitplus.KmmResult
import at.asitplus.KmmResult.Companion.wrap
import at.asitplus.catching
import at.asitplus.signum.indispensable.CryptoPublicKey
import at.asitplus.signum.indispensable.CryptoSignature
import at.asitplus.signum.indispensable.SignatureAlgorithm
import at.asitplus.signum.supreme.UnlockFailed
import at.asitplus.signum.supreme.os.Attestation

interface Signer {
    val signatureAlgorithm: SignatureAlgorithm
    val publicKey: CryptoPublicKey
    /** Whether the signer may ask for user interaction when [sign] is called */
    val mayRequireUserUnlock: Boolean

    /** Any [Signer] instantiation must be [ECDSA] or [RSA] */
    sealed interface AlgTrait : Signer

    /** ECDSA signer */
    interface ECDSA : Signer.AlgTrait {
        override val signatureAlgorithm: SignatureAlgorithm.ECDSA
        override val publicKey: CryptoPublicKey.EC
    }

    /** RSA signer */
    interface RSA : Signer.AlgTrait {
        override val signatureAlgorithm: SignatureAlgorithm.RSA
        override val publicKey: CryptoPublicKey.Rsa
    }

    /** Some [Signer]s might have an attestation of some sort */
    interface Attestable<AttestationT: Attestation>: Signer {
        val attestation: AttestationT?
    }

    suspend fun sign(data: SignatureInput): KmmResult<CryptoSignature>

    /**
     * A handle to a [TemporarilyUnlockable] signer that is temporarily unlocked.
     * The handle is only guaranteed to be valid within the scope of the block.
     */
    @OptIn(ExperimentalStdlibApi::class)
    interface UnlockedHandle: AutoCloseable, Signer {
        override val mayRequireUserUnlock: Boolean get() = false
    }

    /**
     * A signer that can be temporarily unlocked.
     * Once unlocked, multiple signing operations can be performed with a single unlock.
     */
    abstract class TemporarilyUnlockable<Handle: UnlockedHandle> : Signer {
        final override val mayRequireUserUnlock: Boolean get() = true
        protected abstract suspend fun unlock(): KmmResult<Handle>

        /**
         * Unlocks the signer, then executes the block with the [UnlockedHandle] as its receiver.
         *
         * The handle's validity is only guaranteed in the block scope.
         */
        @OptIn(ExperimentalStdlibApi::class)
        suspend fun <T> withUnlock(fn: suspend Handle.()->T): KmmResult<T> =
            /** this is .use() but for suspend functions */
            unlock().transform { h ->
                val v = runCatching { fn(h) }
                try {
                    h.close()
                } catch (y: Throwable) {
                    (v.exceptionOrNull()
                        ?: return@transform KmmResult.failure(y))
                        .addSuppressed(y)
                }
                v.wrap()
            }

        final override suspend fun sign(data: SignatureInput): KmmResult<CryptoSignature> =
            withUnlock { sign(data).getOrThrow() }
    }
}

/**
 * Get a verifier for signatures generated by this [Signer].
 * @see SignatureAlgorithm.verifierFor
 */
fun Signer.makeVerifier(configure: ConfigurePlatformVerifier = null) = signatureAlgorithm.verifierFor(publicKey, configure)

/**
 * Gets a platform verifier for signatures generated by this [Signer].
 * @see SignatureAlgorithm.platformVerifierFor
 */
fun Signer.makePlatformVerifier(configure: ConfigurePlatformVerifier = null) = signatureAlgorithm.platformVerifierFor(publicKey, configure)

val Signer.ECDSA.curve get() = publicKey.curve

/**
 * Try to batch sign with this signer.
 * Might fail for unlockable signers that cannot be temporarily unlocked.
 */
suspend fun <T> Signer.withUnlock(fn: suspend Signer.()->T) =
    when (this.mayRequireUserUnlock) {
        true ->
            if (this is Signer.TemporarilyUnlockable<*>)
                this.withUnlock(fn)
            else
                KmmResult.failure(UnlockFailed("This signer needs authentication for every use"))
        false -> catching { fn(this) }
    }

suspend inline fun Signer.sign(data: ByteArray) = sign(SignatureInput(data))
